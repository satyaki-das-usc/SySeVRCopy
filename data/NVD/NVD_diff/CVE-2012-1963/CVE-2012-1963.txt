diff --git a/content/base/src/nsCSPService.cpp b/content/base/src/nsCSPService.cpp
--- a/content/base/src/nsCSPService.cpp
+++ b/content/base/src/nsCSPService.cpp
@@ -91,22 +91,23 @@ CSPService::ShouldLoad(PRUint32 aContent
 #ifdef PR_LOGGING
             nsAutoString policy;
             csp->GetPolicy(policy);
             PR_LOG(gCspPRLog, PR_LOG_DEBUG,
                     ("Document has CSP: %s",
                      NS_ConvertUTF16toUTF8(policy).get()));
 #endif
             // obtain the enforcement decision
+            // (don't pass aExtra, we use that slot for redirects)
             csp->ShouldLoad(aContentType,
                             aContentLocation,
                             aRequestOrigin,
                             aRequestContext,
                             aMimeTypeGuess,
-                            aExtra,
+                            nsnull,
                             aDecision);
         }
     }
 #ifdef PR_LOGGING
     else {
         nsCAutoString uriSpec;
         aContentLocation->GetSpec(uriSpec);
         PR_LOG(gCspPRLog, PR_LOG_DEBUG,
@@ -215,23 +216,25 @@ CSPService::AsyncOnChannelRedirect(nsICh
    * the new channel's property bag. This container is propagated forward when
    * channels redirect.
    */
 
   // Does the CSP permit this host for this type of load?
   // If not, cancel the load now.
   nsCOMPtr<nsIURI> newUri;
   newChannel->GetURI(getter_AddRefs(newUri));
+  nsCOMPtr<nsIURI> originalUri;
+  oldChannel->GetOriginalURI(getter_AddRefs(originalUri));
   PRInt16 aDecision = nsIContentPolicy::ACCEPT;
   csp->ShouldLoad(loadType,        // load type per nsIContentPolicy (PRUint32)
                   newUri,          // nsIURI
                   nsnull,          // nsIURI
                   nsnull,          // nsISupports
                   EmptyCString(),  // ACString - MIME guess
-                  nsnull,          // nsISupports - extra
+                  originalUri,     // nsISupports - extra
                   &aDecision);
 
 #ifdef PR_LOGGING
   if (newUri) {
     nsCAutoString newUriSpec("None");
     newUri->GetSpec(newUriSpec);
     PR_LOG(gCspPRLog, PR_LOG_DEBUG,
            ("CSPService::AsyncOnChannelRedirect called for %s",
