diff --git a/epan/dissectors/packet-6lowpan.c b/epan/dissectors/packet-6lowpan.c
--- a/epan/dissectors/packet-6lowpan.c	2011/02/23 17:54:00	36035
+++ b/epan/dissectors/packet-6lowpan.c	2011/02/23 21:49:51	36036
@@ -1081,7 +1081,7 @@
 
         /* Construct the next header for the UDP datagram. */
         offset = BITS_TO_BYTE_LEN(0, bit_offset);
-        length = tvb_length_remaining(tvb, offset);
+        length = (gint)tvb_ensure_length_remaining(tvb, offset);
         nhdr_list = (struct lowpan_nhdr *)ep_alloc(sizeof(struct lowpan_nhdr) + sizeof(struct udp_hdr) + length);
         nhdr_list->next = NULL;
         nhdr_list->proto = IP_PROTO_UDP;
@@ -1097,11 +1097,13 @@
      *=====================================================
      */
     else {
+        gint length;
         offset = BITS_TO_BYTE_LEN(0, bit_offset);
-        nhdr_list = (struct lowpan_nhdr *)ep_alloc(sizeof(struct lowpan_nhdr) + tvb_length_remaining(tvb, offset));
+        length = (gint)tvb_ensure_length_remaining(tvb, offset);
+        nhdr_list = (struct lowpan_nhdr *)ep_alloc(sizeof(struct lowpan_nhdr) + length);
         nhdr_list->next = NULL;
         nhdr_list->proto = ipv6.ip6_nxt;
-        nhdr_list->length = tvb_length_remaining(tvb, offset);
+        nhdr_list->length = length;
         if (dgram_size < 0) {
             nhdr_list->reported = tvb_reported_length_remaining(tvb, offset);
         }
@@ -1494,10 +1496,11 @@
     }
     /* Create an extension header for the remaining payload. */
     else {
-        nhdr_list = (struct lowpan_nhdr *)ep_alloc(sizeof(struct lowpan_nhdr) + tvb_length_remaining(tvb, offset));
+        length = (gint)tvb_ensure_length_remaining(tvb, offset);
+        nhdr_list = (struct lowpan_nhdr *)ep_alloc(sizeof(struct lowpan_nhdr) + length);
         nhdr_list->next = NULL;
         nhdr_list->proto = ipv6.ip6_nxt;
-        nhdr_list->length = tvb_length_remaining(tvb, offset);
+        nhdr_list->length = length;
         if (dgram_size < 0) {
             nhdr_list->reported = tvb_reported_length_remaining(tvb, offset);
         }
@@ -1635,10 +1638,11 @@
         }
         else {
             /* Create another next header structure for the remaining payload. */
-            nhdr->next = (struct lowpan_nhdr *)ep_alloc(sizeof(struct lowpan_nhdr) + tvb_length_remaining(tvb, offset));
+            length = (gint)tvb_ensure_length_remaining(tvb, offset);
+            nhdr->next = (struct lowpan_nhdr *)ep_alloc(sizeof(struct lowpan_nhdr) + length);
             nhdr->next->next = NULL;
             nhdr->next->proto = ipv6_ext.ip6e_nxt;
-            nhdr->next->length = tvb_length_remaining(tvb, offset);
+            nhdr->next->length = length;
             if (dgram_size < 0) {
                 nhdr->next->reported = tvb_reported_length_remaining(tvb, offset);
             }
@@ -1787,10 +1791,11 @@
 #endif
 
         /* Create the next header structure for the UDP datagram. */
-        nhdr = (struct lowpan_nhdr *)ep_alloc(sizeof(struct lowpan_nhdr) + sizeof(struct udp_hdr) + tvb_length_remaining(tvb, offset));
+        length = (gint)tvb_ensure_length_remaining(tvb, offset);
+        nhdr = (struct lowpan_nhdr *)ep_alloc(sizeof(struct lowpan_nhdr) + sizeof(struct udp_hdr) + length);
         nhdr->next = NULL;
         nhdr->proto = IP_PROTO_UDP;
-        nhdr->length = tvb_length_remaining(tvb, offset) + sizeof(struct udp_hdr);
+        nhdr->length = length + sizeof(struct udp_hdr);
         nhdr->reported = g_ntohs(udp.length);
 
         /* Copy the UDP header and payload into the buffer. */