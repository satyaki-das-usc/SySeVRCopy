diff --git a/js/xpconnect/wrappers/ChromeObjectWrapper.cpp b/js/xpconnect/wrappers/ChromeObjectWrapper.cpp
--- a/js/xpconnect/wrappers/ChromeObjectWrapper.cpp
+++ b/js/xpconnect/wrappers/ChromeObjectWrapper.cpp
@@ -29,38 +29,36 @@ ChromeObjectWrapper::getPropertyDescriptor(JSContext *cx, JSObject *wrapper,
     }
 
     // If we found something, were doing a set, or have no proto, we're done.
     JSObject *wrapperProto = JS_GetPrototype(wrapper);
     if (desc->obj || set || !wrapperProto)
         return true;
 
     // If not, try doing the lookup on the prototype.
-    JSAutoEnterCompartment ac;
-    return ac.enter(cx, wrapper) &&
-           JS_GetPropertyDescriptorById(cx, wrapperProto, id, 0, desc);
+    JS_ASSERT(js::IsObjectInContextCompartment(wrapper, cx));
+    return JS_GetPropertyDescriptorById(cx, wrapperProto, id, 0, desc);
 }
 
 bool
 ChromeObjectWrapper::has(JSContext *cx, JSObject *wrapper, jsid id, bool *bp)
 {
     // Try the lookup on the base wrapper.
     if (!ChromeObjectWrapperBase::has(cx, wrapper, id, bp))
         return false;
 
     // If we found something or have no prototype, we're done.
     JSObject *wrapperProto = JS_GetPrototype(wrapper);
     if (*bp || !wrapperProto)
         return true;
 
     // Try the prototype if that failed.
-    JSAutoEnterCompartment ac;
+    JS_ASSERT(js::IsObjectInContextCompartment(wrapper, cx));
     JSPropertyDescriptor desc;
-    if (!ac.enter(cx, wrapper) ||
-        !JS_GetPropertyDescriptorById(cx, wrapperProto, id, 0, &desc))
+    if (!JS_GetPropertyDescriptorById(cx, wrapperProto, id, 0, &desc))
     {
         return false;
     }
     *bp = !!desc.obj;
     return true;
 }
 
 bool
@@ -72,15 +70,13 @@ ChromeObjectWrapper::get(JSContext *cx, JSObject *wrapper, JSObject *receiver,
         return false;
 
     // If we found something or have no proto, we're done.
     JSObject *wrapperProto = JS_GetPrototype(wrapper);
     if (!vp->isUndefined() || !wrapperProto)
         return true;
 
     // Try the prototype.
-    JSAutoEnterCompartment ac;
-    if (!ac.enter(cx, wrapper))
-        return false;
+    JS_ASSERT(js::IsObjectInContextCompartment(wrapper, cx));
     return js::GetGeneric(cx, wrapperProto, receiver, id, vp);
 }
 
 }