diff --git a/netwerk/cookie/nsCookieService.cpp b/netwerk/cookie/nsCookieService.cpp
--- a/netwerk/cookie/nsCookieService.cpp
+++ b/netwerk/cookie/nsCookieService.cpp
@@ -2888,22 +2888,28 @@ nsCookieService::SetCookieInternal(nsIUR
     cookieAttributes.isSession = true;
   }
 
   // reject cookie if it's over the size limit, per RFC2109
   if ((cookieAttributes.name.Length() + cookieAttributes.value.Length()) > kMaxBytesPerCookie) {
     COOKIE_LOGFAILURE(SET_COOKIE, aHostURI, savedCookieHeader, "cookie too big (> 4kb)");
     return newCookie;
   }
-
+  
   if (cookieAttributes.name.FindChar('\t') != kNotFound) {
     COOKIE_LOGFAILURE(SET_COOKIE, aHostURI, savedCookieHeader, "invalid name character");
     return newCookie;
   }
-
+  
+  // reject cookie if it contains any other control characters, fixing CVE-2013-6167
+  if (ContainsControlCharacters(cookieAttributes.name) || ContainsControlCharacters(cookieAttributes.value)) {
+    COOKIE_LOGFAILURE(SET_COOKIE, aHostURI, savedCookieHeader, "invalid control characters");
+    return newCookie;
+  }
+  
   // domain & path checks
   if (!CheckDomain(cookieAttributes, aHostURI, aKey.mBaseDomain, aRequireHostMatch)) {
     COOKIE_LOGFAILURE(SET_COOKIE, aHostURI, savedCookieHeader, "failed the domain tests");
     return newCookie;
   }
   if (!CheckPath(cookieAttributes, aHostURI)) {
     COOKIE_LOGFAILURE(SET_COOKIE, aHostURI, savedCookieHeader, "failed the path tests");
     return newCookie;
@@ -3406,16 +3412,29 @@ static inline bool IsSubdomainOf(const n
 {
   if (a == b)
     return true;
   if (a.Length() > b.Length())
     return a[a.Length() - b.Length() - 1] == '.' && StringEndsWith(a, b);
   return false;
 }
 
+// tests whether a string contains any control characters
+// which might cause problems if set in a cookie
+bool
+nsCookieService::ContainsControlCharacters(const nsCString &s)
+{
+  unsigned int i;
+  for(i = 0; i < s.Length(); i++) {
+    if(s[i] >= 0 && s[i] <= 31)
+      return true;
+  }
+  return false;
+}
+
 CookieStatus
 nsCookieService::CheckPrefs(nsIURI          *aHostURI,
                             bool             aIsForeign,
                             bool             aRequireHostMatch,
                             const char      *aCookieHeader)
 {
   nsresult rv;
 