diff --git a/docshell/base/nsDSURIContentListener.cpp b/docshell/base/nsDSURIContentListener.cpp
--- a/docshell/base/nsDSURIContentListener.cpp
+++ b/docshell/base/nsDSURIContentListener.cpp
@@ -10,16 +10,17 @@
 #include "nsXPIDLString.h"
 #include "nsDocShellCID.h"
 #include "nsIWebNavigationInfo.h"
 #include "nsIDOMWindow.h"
 #include "nsAutoPtr.h"
 #include "nsIHttpChannel.h"
 #include "nsIScriptSecurityManager.h"
 #include "nsNetError.h"
+#include "nsCharSeparatedTokenizer.h"
 #include "mozilla/Preferences.h"
 
 using namespace mozilla;
 
 static bool sIgnoreXFrameOptions = false;
 
 //*****************************************************************************
 //***    nsDSURIContentListener: Object Management
@@ -264,39 +265,28 @@ nsDSURIContentListener::SetParentContent
     else
     {
         mWeakParentContentListener = nsnull;
         mParentContentListener = nsnull;
     }
     return NS_OK;
 }
 
-// Check if X-Frame-Options permits this document to be loaded as a subdocument.
-bool nsDSURIContentListener::CheckFrameOptions(nsIRequest* request)
-{
-    // If X-Frame-Options checking is disabled, return true unconditionally.
-    if (sIgnoreXFrameOptions) {
+bool nsDSURIContentListener::CheckOneFrameOptionsPolicy(nsIRequest *request,
+                                                        const nsAString& policy) {
+    // return early if header does not have one of the two values with meaning
+    if (!policy.LowerCaseEqualsLiteral("deny") &&
+        !policy.LowerCaseEqualsLiteral("sameorigin"))
         return true;
-    }
-
-    nsCAutoString xfoHeaderValue;
 
     nsCOMPtr<nsIHttpChannel> httpChannel = do_QueryInterface(request);
     if (!httpChannel) {
         return true;
     }
 
-    httpChannel->GetResponseHeader(NS_LITERAL_CSTRING("X-Frame-Options"),
-                                   xfoHeaderValue);
-
-    // return early if header does not have one of the two values with meaning
-    if (!xfoHeaderValue.LowerCaseEqualsLiteral("deny") &&
-        !xfoHeaderValue.LowerCaseEqualsLiteral("sameorigin"))
-        return true;
-
     if (mDocShell) {
         // We need to check the location of this window and the location of the top
         // window, if we're not the top.  X-F-O: SAMEORIGIN requires that the
         // document must be same-origin with top window.  X-F-O: DENY requires that
         // the document must never be framed.
         nsCOMPtr<nsIDOMWindow> thisWindow = do_GetInterface(static_cast<nsIDocShell*>(mDocShell));
         // If we don't have DOMWindow there is no risk of clickjacking
         if (!thisWindow)
@@ -316,66 +306,106 @@ bool nsDSURIContentListener::CheckFrameO
         nsCOMPtr<nsIDocShellTreeItem> thisDocShellItem(do_QueryInterface(
                                                        static_cast<nsIDocShell*> (mDocShell)));
         nsCOMPtr<nsIDocShellTreeItem> parentDocShellItem,
                                       curDocShellItem = thisDocShellItem;
         nsCOMPtr<nsIDocument> topDoc;
         nsresult rv;
         nsCOMPtr<nsIScriptSecurityManager> ssm =
             do_GetService(NS_SCRIPTSECURITYMANAGER_CONTRACTID, &rv);
-        if (!ssm)
+        if (!ssm) {
+            NS_ASSERTION(ssm, "Failed to get the ScriptSecurityManager.");
             return false;
+        }
 
         // Traverse up the parent chain to the top docshell that doesn't have
         // a system principal
         while (NS_SUCCEEDED(curDocShellItem->GetParent(getter_AddRefs(parentDocShellItem))) &&
                parentDocShellItem) {
             bool system = false;
             topDoc = do_GetInterface(parentDocShellItem);
             if (topDoc) {
                 if (NS_SUCCEEDED(ssm->IsSystemPrincipal(topDoc->NodePrincipal(),
                                                         &system)) && system) {
+                    // Found a system-principled doc: last docshell was top.
                     break;
                 }
             }
             else {
                 return false;
             }
             curDocShellItem = parentDocShellItem;
         }
 
         // If this document has the top non-SystemPrincipal docshell it is not being
         // framed or it is being framed by a chrome document, which we allow.
         if (curDocShellItem == thisDocShellItem)
             return true;
 
+        // If the value of the header is DENY, and the previous condition is
+        // not met (current docshell is not the top docshell), prohibit the
+        // load.
+        if (policy.LowerCaseEqualsLiteral("deny")) {
+            return false;
+        }
+
         // If the X-Frame-Options value is SAMEORIGIN, then the top frame in the
         // parent chain must be from the same origin as this document.
-        if (xfoHeaderValue.LowerCaseEqualsLiteral("sameorigin")) {
+        if (policy.LowerCaseEqualsLiteral("sameorigin")) {
             nsCOMPtr<nsIURI> uri;
             httpChannel->GetURI(getter_AddRefs(uri));
             topDoc = do_GetInterface(curDocShellItem);
             nsCOMPtr<nsIURI> topUri;
             topDoc->NodePrincipal()->GetURI(getter_AddRefs(topUri));
             rv = ssm->CheckSameOriginURI(uri, topUri, true);
-            if (NS_SUCCEEDED(rv))
-                return true;
+            if (NS_FAILED(rv))
+                return false; /* wasn't same-origin */
         }
-
-        else {
-            // If the value of the header is DENY, then the document
-            // should never be permitted to load as a subdocument.
-            NS_ASSERTION(xfoHeaderValue.LowerCaseEqualsLiteral("deny"),
-                         "How did we get here with some random header value?");
-        }
-
-        // cancel the load and display about:blank
-        httpChannel->Cancel(NS_BINDING_ABORTED);
-        nsCOMPtr<nsIWebNavigation> webNav(do_QueryObject(mDocShell));
-        if (webNav) {
-            webNav->LoadURI(NS_LITERAL_STRING("about:blank").get(),
-                            0, nsnull, nsnull, nsnull);
-        }
-        return false;
     }
 
     return true;
 }
+
+// Check if X-Frame-Options permits this document to be loaded as a subdocument.
+// This will iterate through and check any number of X-Frame-Options policies
+// in the request (comma-separated in a header, multiple headers, etc).
+bool nsDSURIContentListener::CheckFrameOptions(nsIRequest *request)
+{
+    // If X-Frame-Options checking is disabled, return true unconditionally.
+    if (sIgnoreXFrameOptions) {
+        return true;
+    }
+
+    nsCOMPtr<nsIHttpChannel> httpChannel = do_QueryInterface(request);
+    if (!httpChannel) {
+        return true;
+    }
+
+    nsCAutoString xfoHeaderCValue;
+    httpChannel->GetResponseHeader(NS_LITERAL_CSTRING("X-Frame-Options"),
+                                   xfoHeaderCValue);
+    NS_ConvertUTF8toUTF16 xfoHeaderValue(xfoHeaderCValue);
+
+    // if no header value, there's nothing to do.
+    if (xfoHeaderValue.IsEmpty())
+        return true;
+
+    // iterate through all the header values (usually there's only one, but can
+    // be many.  If any want to deny the load, deny the load.
+    nsCharSeparatedTokenizer tokenizer(xfoHeaderValue, ',');
+    while (tokenizer.hasMoreTokens()) {
+        const nsSubstring& tok = tokenizer.nextToken();
+        if (!CheckOneFrameOptionsPolicy(request, tok)) {
+            // cancel the load and display about:blank
+            httpChannel->Cancel(NS_BINDING_ABORTED);
+            if (mDocShell) {
+                nsCOMPtr<nsIWebNavigation> webNav(do_QueryObject(mDocShell));
+                if (webNav) {
+                    webNav->LoadURI(NS_LITERAL_STRING("about:blank").get(),
+                                    0, nsnull, nsnull, nsnull);
+                }
+            }
+            return false;
+        }
+    }
+
+    return true;
+}
diff --git a/docshell/base/nsDSURIContentListener.h b/docshell/base/nsDSURIContentListener.h
--- a/docshell/base/nsDSURIContentListener.h
+++ b/docshell/base/nsDSURIContentListener.h
@@ -33,16 +33,18 @@ protected:
 
     void DropDocShellreference() {
         mDocShell = nsnull;
     }
 
     // Determine if X-Frame-Options allows content to be framed
     // as a subdocument
     bool CheckFrameOptions(nsIRequest* request);
+    bool CheckOneFrameOptionsPolicy(nsIRequest* request,
+                                    const nsAString& policy);
 
 protected:
     nsDocShell*                      mDocShell;
 
     // Store the parent listener in either of these depending on
     // if supports weak references or not. Proper weak refs are
     // preferred and encouraged!
     nsWeakPtr                        mWeakParentContentListener;

