diff --git a/dom/base/nsJSEnvironment.cpp b/dom/base/nsJSEnvironment.cpp
--- a/dom/base/nsJSEnvironment.cpp
+++ b/dom/base/nsJSEnvironment.cpp
@@ -3019,31 +3019,37 @@ nsJSContext::ClearScope(void *aGlobalObj
     JSAutoEnterCompartment ac;
     ac.enterAndIgnoreErrors(mContext, obj);
 
     // Grab a reference to the window property, which is the outer
     // window, so that we can re-define it once we've cleared
     // scope. This is what keeps the outer window alive in cases where
     // nothing else does.
     jsval window;
-    if (!JS_GetProperty(mContext, obj, "window", &window)) {
+    uintN windowAttrs;
+    JSPropertyOp windowGetter;
+    JSStrictPropertyOp windowSetter;
+    JSBool windowFound;
+    if (!JS_GetProperty(mContext, obj, "window", &window) ||
+        !JS_GetPropertyAttrsGetterAndSetter(mContext, obj, "window",
+                                            &windowAttrs, &windowFound,
+                                            &windowGetter, &windowSetter) ||
+        !windowFound) {
       window = JSVAL_VOID;
 
       JS_ClearPendingException(mContext);
     }
 
     JS_ClearScope(mContext, obj);
 
     NS_ABORT_IF_FALSE(!xpc::WrapperFactory::IsXrayWrapper(obj), "unexpected wrapper");
 
     if (window != JSVAL_VOID) {
       if (!JS_DefineProperty(mContext, obj, "window", window,
-                             JS_PropertyStub, JS_StrictPropertyStub,
-                             JSPROP_ENUMERATE | JSPROP_READONLY |
-                             JSPROP_PERMANENT)) {
+                             windowGetter, windowSetter, windowAttrs)) {
         JS_ClearPendingException(mContext);
       }
     }
 
     if (!js::GetObjectParent(obj)) {
       JS_ClearRegExpStatics(mContext, obj);
     }
